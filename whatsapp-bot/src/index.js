
import { Client, LocalAuth } from 'whatsapp-web.js';
import qrcode from 'qrcode-terminal';
import dotenv from 'dotenv';
import { processarMensagem } from './handlers/messageHandler.js';

// Carrega vari√°veis de ambiente
dotenv.config();

console.log('üöÄ Iniciando Bot WhatsApp...');

// Cria o cliente WhatsApp com autentica√ß√£o local
const client = new Client({
  authStrategy: new LocalAuth({
    clientId: "whatsapp-bot-supabase"
  }),
  puppeteer: {
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--single-process',
      '--disable-gpu'
    ]
  }
});

// Evento: QR Code para autentica√ß√£o
client.on('qr', (qr) => {
  console.log('üì± Escaneie o QR Code abaixo com o WhatsApp:');
  qrcode.generate(qr, { small: true });
  console.log('\n‚ö° Aguardando autentica√ß√£o...');
});

// Evento: Cliente pronto
client.on('ready', () => {
  console.log('‚úÖ Bot WhatsApp conectado e pronto!');
  console.log('ü§ñ Aguardando mensagens...\n');
  
  // Envia mensagem de teste para si mesmo (opcional)
  // client.sendMessage('seu_numero@c.us', 'ü§ñ Bot iniciado com sucesso!');
});

// Evento: Autentica√ß√£o bem-sucedida
client.on('authenticated', () => {
  console.log('üîê Autentica√ß√£o realizada com sucesso!');
});

// Evento: Falha na autentica√ß√£o
client.on('auth_failure', (msg) => {
  console.error('‚ùå Falha na autentica√ß√£o:', msg);
});

// Evento: Cliente desconectado
client.on('disconnected', (reason) => {
  console.log('‚ö†Ô∏è Cliente desconectado:', reason);
  console.log('üîÑ Tentando reconectar...');
});

// Evento: Nova mensagem recebida
client.on('message', async (message) => {
  await processarMensagem(message, client);
});

// Evento: Erro
client.on('error', (error) => {
  console.error('‚ùå Erro no cliente WhatsApp:', error);
});

// Inicializa o cliente
client.initialize();

// Tratamento de sinais para encerramento gracioso
process.on('SIGINT', async () => {
  console.log('\nüõë Recebido sinal de interrup√ß√£o, encerrando bot...');
  await client.destroy();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Recebido sinal de t√©rmino, encerrando bot...');
  await client.destroy();
  process.exit(0);
});

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erro n√£o tratado:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
  process.exit(1);
});
